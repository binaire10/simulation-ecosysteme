if (NOT DEFINED AutoImport_LOADED)
    set(AutoImport_LOADED true)
    set(AutoImport_DIR ${CMAKE_SOURCE_DIR}/vendor CACHE STRING "")
    set(AutoImport_INFO_NAME depend.json CACHE STRING "")
    file(MAKE_DIRECTORY "${AutoImport_DIR}")
    file(LOCK ${AutoImport_DIR} DIRECTORY)
    unset(AutoImport_CMAKE_DIRS)
    unset(AutoImport_CMAKE_VARS)

    find_program(GIT_COMMAND git)

    file(GLOB_RECURSE AutoImport_FILES ${AutoImport_INFO_NAME})
    unset(AutoImport_LOADED)
    foreach (JSON_FILE ${AutoImport_FILES})
        get_filename_component(WORKING_DIR ${JSON_FILE} DIRECTORY)
        file(READ ${JSON_FILE} AutoImport_DEPENDENCIES)

        string(JSON LIB_ARRAY GET ${AutoImport_DEPENDENCIES} "library")
        string(JSON LEN_LIB_ARRAY LENGTH ${LIB_ARRAY})

        math(EXPR LEN_LIB_ARRAY "${LEN_LIB_ARRAY} - 1")
        if (NOT ${LEN_LIB_ARRAY} LESS 0)
            foreach (ID RANGE 0 ${LEN_LIB_ARRAY})
                string(JSON LIB_NAME GET ${LIB_ARRAY} ${ID} "name")
                if (NOT "${LIB_NAME}" IN_LIST AutoImport_LOADED)
                    list(APPEND AutoImport_LOADED "${LIB_NAME}")
                    string(JSON LIB_ARCHIVE_URL ERROR_VARIABLE _ GET ${LIB_ARRAY} ${ID} "archive_url")
                    string(JSON LIB_GIT_URL ERROR_VARIABLE _ GET ${LIB_ARRAY} ${ID} "git_url")
                    string(JSON LIB_GIT_BRANCH ERROR_VARIABLE _ GET ${LIB_ARRAY} ${ID} "git_branch")
                    string(JSON LIB_LOCAL_PATH ERROR_VARIABLE _ GET ${LIB_ARRAY} ${ID} "local_path")
                    string(JSON LIB_CMAKELIST_DIR ERROR_VARIABLE _ GET ${LIB_ARRAY} ${ID} "cmakelist_dir")
                    string(JSON LIB_CMAKE_VARIABLE ERROR_VARIABLE _ GET ${LIB_ARRAY} ${ID} "cmake_variables")
                    string(JSON LIB_CMAKELIST_COPY ERROR_VARIABLE _ GET ${LIB_ARRAY} ${ID} "cmakelist_copy")

                    if (NOT GIT_COMMAND AND LIB_GIT_URL)
                        message(FATAL_ERROR "require git to import project")
                    endif ()
                    set(LIB_PATH ${AutoImport_DIR}/${LIB_NAME})

                    if (LIB_CMAKELIST_DIR)
                        set(LIB_CMAKELIST_DIR ${LIB_PATH}/${LIB_CMAKELIST_DIR})
                    else ()
                        set(LIB_CMAKELIST_DIR ${LIB_PATH})
                    endif ()

                    if (LIB_LOCAL_PATH)
                        cmake_path(IS_RELATIVE LIB_LOCAL_PATH RELATIVE_PATH)
                        if (${RELATIVE_PATH})
                            set(LIB_LOCAL_PATH ${WORKING_DIR}/${LIB_LOCAL_PATH})
                        endif ()
                    endif ()

                    if (LIB_CMAKELIST_COPY)
                        cmake_path(IS_RELATIVE LIB_CMAKELIST_COPY RELATIVE_PATH)
                        if (${RELATIVE_PATH})
                            set(LIB_CMAKELIST_COPY ${WORKING_DIR}/${LIB_CMAKELIST_COPY})
                        endif ()
                    endif ()

                    message(STATUS "project name : ${LIB_NAME}
    path          : ${LIB_PATH}
    cmakelist_dir : ${LIB_CMAKELIST_DIR}
    archive       : ${LIB_ARCHIVE_URL}
    git url       : ${LIB_GIT_URL} / ${LIB_GIT_BRANCH}
    local path    : ${LIB_LOCAL_PATH}")

                    if (NOT TARGET ${LIB_NAME})
                        if (NOT EXISTS ${LIB_CMAKELIST_DIR}/CMakeLists.txt)

                            message(STATUS "Reimport missing dependence")

                            if (LIB_ARCHIVE_URL)
                                message(STATUS "download archive")
                                file(DOWNLOAD ${LIB_ARCHIVE_URL} ${LIB_PATH}.archive)
                                file(ARCHIVE_EXTRACT INPUT ${LIB_PATH}.archive DESTINATION ${LIB_PATH})
                                file(REMOVE ${LIB_PATH}.archive)
                            elseif (LIB_GIT_URL AND GIT_COMMAND)
                                message(STATUS "clone git")
                                if (LIB_GIT_BRANCH)
                                    execute_process(COMMAND ${GIT_COMMAND} clone -b ${LIB_GIT_BRANCH} ${LIB_GIT_URL} ${LIB_PATH} COMMAND_ERROR_IS_FATAL ANY)
                                else ()
                                    execute_process(COMMAND ${GIT_COMMAND} clone ${LIB_GIT_URL} ${LIB_PATH} COMMAND_ERROR_IS_FATAL ANY)
                                endif ()
                            elseif (LIB_LOCAL_PATH AND NOT LIB_LOCAL_PATH STREQUAL LIB_PATH)
                                message(STATUS "copy directory")
                                message(STATUS "${LIB_LOCAL_PATH} <=> ${LIB_PATH}")
                                execute_process(COMMAND ${CMAKE_COMMAND} -E copy_directory ${LIB_LOCAL_PATH}/ ${LIB_PATH} COMMAND_ECHO STDOUT WORKING_DIRECTORY ${WORKING_DIR} COMMAND_ERROR_IS_FATAL ANY)
                            else ()
                                message(FATAL_ERROR "missing entry to import")
                            endif ()
                            message("Complet files import")

                            if (LIB_CMAKELIST_COPY)
                                message(STATUS "copy cmakelist ${LIB_CMAKELIST_COPY} => ${LIB_CMAKELIST_DIR}")
                                file(COPY ${LIB_CMAKELIST_COPY} DESTINATION ${LIB_CMAKELIST_DIR})
                            endif ()
                        endif ()

                        unset(SCRIPT)
                        if (LIB_CMAKE_VARIABLE)
                            string(JSON LIB_CMAKE_VARIABLE_LEN LENGTH ${LIB_CMAKE_VARIABLE})
                            math(EXPR LIB_CMAKE_VARIABLE_LEN "${LIB_CMAKE_VARIABLE_LEN} - 1")
                            if (NOT ${LIB_CMAKE_VARIABLE_LEN} LESS 0)
                                foreach (ID RANGE 0 ${LIB_CMAKE_VARIABLE_LEN})
                                    string(JSON VAR_NAME MEMBER ${LIB_CMAKE_VARIABLE} ${ID})
                                    string(JSON VAR_VALUE GET ${LIB_CMAKE_VARIABLE} ${VAR_NAME})
                                    set(SCRIPT "${SCRIPT}set(${VAR_NAME} ${VAR_VALUE})\n")
                                    message(STATUS  "${VAR_NAME} => ${VAR_VALUE}")
                                endforeach ()
                            endif ()
                        endif ()
                        set(AutoImport_CMAKE_VARS ${AutoImport_CMAKE_VARS} ${SCRIPT})
                        set(AutoImport_CMAKE_DIRS ${AutoImport_CMAKE_DIRS} ${LIB_CMAKELIST_DIR})

                    endif ()
                endif ()
            endforeach ()
        endif ()
    endforeach ()
    file(LOCK ${AutoImport_DIR} DIRECTORY RELEASE)

    foreach(A B IN ZIP_LISTS AutoImport_CMAKE_DIRS AutoImport_CMAKE_VARS)
        cmake_language(EVAL CODE ${B})
        add_subdirectory(${A})
    endforeach()
endif ()